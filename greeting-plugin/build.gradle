/*
    - documentazione ufficiale: https://docs.gradle.org/current/userguide/publishing_gradle_plugins.html
        c'Ã¨ anche la documentazione su come pubblicare su Maven remoto
        Si richiede che le due chiavi API siano consultabili quando viene pubblicato

    - GRADLE PROPERTIES
        https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties

    - SI POSSONO CIFRARE LE CREDENZIALI!!!

    - MAVEN PUBLISH SI APPLIC ANCHE A MAVEN LOCALE!!!!!!

 */

plugins {
    id 'groovy'
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "1.0.0-rc-2"
}

pluginBundle {
    website = 'https://github.com/giuseppegargani/greetings_plugin'
    vcsUrl = 'https://github.com/giuseppegargani/greetings_plugin'
    tags = ['example', 'try', 'prova', 'tentativo']
}

repositories {
    // Use Maven Central for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    google()
    mavenCentral()
    //per caricamento artifactId locale per plugin
    mavenLocal()
    gradlePluginPortal()
    jcenter() // Warning: this repository is going to shut down soon
}

dependencies {
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.13'
}

//Questo e' il gruppo!!!
group = 'com.barsali.plugin'
version = '0.32'

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'com.barsali.plugin.greeting'
            displayName = 'barsaligreetings'
            description = 'FIRST CUSTOM PLUGIN'
            implementationClass = 'com.example.plugin.GreetingPlug'
        }
    }
}

// Add a source set and a task for a functional test suite
def functionalTest = sourceSets.create('functionalTest')
gradlePlugin.testSourceSets(functionalTest)

configurations[functionalTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)

def functionalTestTask = tasks.register('functionalTest', Test) {
    testClassesDirs = functionalTest.output.classesDirs
    classpath = configurations[functionalTest.runtimeClasspathConfigurationName] + functionalTest.output
}

tasks.check.configure {
    // Run the functional tests as part of `check`
    dependsOn(functionalTestTask)
}
task wrapper(type: Wrapper){
    gradleVersion = '7.2'
}
task prepareKotlinBuildScriptModel {

}


